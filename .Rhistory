fixef(m)
View(uc)
coefs = coef(m)
View(vs)
View(predictions)
zframe0 = with(xdata, expand.grid(sex=levels(sex),
agecat=levels(agecat),
race3m1=levels(race3m1)))
View(zframe0)
xmm = model.matrix(~sex+agecat+race3m1, data=zframe0)
zframe1 = data.frame(zframe0, eta=xmm%*%fixef(m))
zframe1 = with(zframe1,data.frame(zframe1, eminuse=invlogit(eta)))
View(zframe1)
xmm
model.matrix(m)
zmm = model.matrix(m)
View(zmm)
xmm = model.matrix(~sex+agecat+race3m1+fips, data=zframe0)
zframe0 = with(xdata, expand.grid(sex=levels(sex),
agecat=levels(agecat),
race3m1=levels(race3m1),
fips=levels(fips)))
xmm = model.matrix(~sex+agecat+race3m1+fips, data=zframe0)
dim(xmm)
fm(xmm)
rm(xmm)
fixef(m)
dim(fixef(m))
dim(as.matrix(fixef(m)))
zframe0 = with(xdata, expand.grid(sex=levels(sex),
agecat=levels(agecat),
race3m1=levels(race3m1)))
zframe1 = data.frame(zframe0, eta=zmm%*%fixef(m))
zframe1 = data.frame(data, eta=zmm%*%fixef(m))
View(zframe1)
zframe1 = with(zframe1,data.frame(zframe1, eminuse=invlogit(eta)))
View(zframe1)
setorder(zframe1, sex, agecat, race3m1)
View(zframe1)
View(predictions)
predictions = as.data.table(data, predict(m, type='response')))
predictions = as.data.table(data, predict(m, type='response'))
View(predictions)
predict(m, type='response')
predictions = as.data.table(data, prediction=predict(m, type='response'))
View(predictions)
predictions = rbind(data, prediction=predict(m, type='response'))
predictions = cbind(data, prediction=predict(m, type='response'))
View(predictions)
setorder(predictions, sex, agecat, race3m1)
View(predictions)
ranef(m)
rm(zframe1, zframe0, zmm)
uc = ranef(m)$fips
View(uc)
uc = data.table(fips = row.names(uc), RE = uc['(Intercept)'])
setnames(uc, names(uc), c('fips', 'RE'))
uc[, fips := sprintf('%05s', fips)]
View(uc)
View(acs.data)
uc = merge(ctys, uc, by = 'fips', all.x = T)
View(uc)
coords = data.table(fips = cty.shp@data$GEOID, coordinates(cty.shp))
setnames(coords, names(coords), c('fips', 'lon', 'lat'))
coords = merge(coords, uc, by = 'fips')
dsts = coords[is.na(RE), .(lat, lon)]
srcs = coords[!is.na(RE), .(lat, lon)]
nn = get.knnx(srcs, dsts, 1)
uc[is.na(RE), RE := uc[!is.na(RE), RE][nn$nn.index]]
rm(coords, dsts, srcs)
View(uc)
# params = as.data.table(coefs[[1]], keep.rownames=T)
# setnames(params, names(params),
#          c('fips', 'RE', 'sex1', 'agecat1', 'agecat2', 'agecat3', 'agecat4', 'agecat5', 'race3m1.2', 'race3m1.3', 'race3m1.4', 'race3m1.7'))
# params = params[1]
# params[, c('fips', 'RE') := NULL]
# params = as.list(params)
#
vs = ranef(m)$state
vs = data.table(state = row.names(vs), RE = vs['(Intercept)'])
setnames(vs, names(vs), c('state', 'RE'))
vs[, state := sprintf('%02s', state)]
View(vs)
xdata = data[, .(state, fips, sex, agecat, race3m1)]
xdata[, fips := sprintf('%05d', fips)]
xdata[, state := sprintf('%02d', state)]
xdata = merge(uc, xdata, by = 'fips', all.x = T)
xdata[, fips := as.factor(fips)]
pframe0 = with(xdata, expand.grid(sex=levels(sex),
agecat=levels(agecat),
race3m1=levels(race3m1),
fips=levels(fips)))
pframe0$state = substr(pframe0$fips, 1, 2)
xmm = model.matrix(~sex+agecat+race3m1+fips+state, data=pframe0)
eff = as.matrix(c(fixef(m), uc$RE[-1], vs$RE[-1]))
pframe1 = data.frame(pframe0, eta=xmm%*%eff)
pframe1 = with(pframe1,data.frame(pframe1, eminuse=invlogit(eta)))
pframe1 = as.data.table(pframe1)
View(pframe1)
hist(pframe1$eminuse)
View(acs.data)
View(pframe1)
p = melt(acs.data[complete.cases(acs.data)], id.vars = c('fips', 'tract'),
measure.vars = cols)
sex = p[grep('sex', variable)]
sex[, sex := as.factor(ifelse(variable == 'sex1', 1, 0))]
sex.ca = sex[grep('^06', fips), .(fips, tract, sex, value)]
View(p)
test.ca = merge(p[grep('^06', fips), .(fips, tract)],
pframe1,
by = 'fips',
all.x = T, allow.cartesian=T)
test.ca = merge(test.ca, sex.ca, by = c('fips', 'tract', 'sex'))
setnames(test.ca, 'value', 'sex.p')
agecat = p[grep('agecat', variable)]
View(p)
levels(p$variable)
droplevels(agecat$variable)
View(agecat)
levels(agecat$variable)
agecat[, variable := droplevels(variable)]
View(agecat)
levels(agecat$variable)
levels(data$agecat)
levels(agecat$variable) = levels(data$agecat)
levels(agecat$variable)
setname(agecat, 'variable', 'agecat')
setnames(agecat, 'variable', 'agecat')
View(agecat)
agecat.ca = sex[grep('^06', fips), .(fips, tract, agecat, value)]
agecat.ca = agecat[grep('^06', fips), .(fips, tract, agecat, value)]
View(agecat.ca)
test.ca = merge(test.ca, agecat.ca, by = c('fips', 'tract', 'agecat'))
setnames(test.ca, 'value', 'agecat.p')
race3m1 = p[grep('race3m1', variable)]
race3m1[, variable := droplevels(variable)]
levels(race3m1$variable)
levels(data$race3m1)
levels(race3m1$variable) = levels(data$race3m1)
setnames(agecat, 'variable', 'race3m1')
setnames(race3m1, 'variable', 'race3m1')
race3m1.ca = race3m1[grep('^06', fips), .(fips, tract, race3m1, value)]
View(race3m1.ca)
test.ca = merge(test.ca, race3m1.ca, by = c('fips', 'tract', 'race3m1'))
setnames(test.ca, 'value', 'race3m1.p')
View(test.ca)
View(race3m1.ca)
View(p)
test.ca = merge(p[grep('^06', fips), .(fips, tract)],
pframe1,
by = 'fips',
all.x = T, allow.cartesian=T)
View(test.ca)
duplicated(test.ca)
60 * 73056
test.ca = test.ca[!duplicated(test.ca)]
test.ca = merge(test.ca, sex.ca, by = c('fips', 'tract', 'sex'))
setnames(test.ca, 'value', 'sex.p')
test.ca = merge(test.ca, agecat.ca, by = c('fips', 'tract', 'agecat'))
setnames(test.ca, 'value', 'agecat.p')
test.ca = merge(test.ca, race3m1.ca, by = c('fips', 'tract', 'race3m1'))
setnames(test.ca, 'value', 'race3m1.p')
View(test.ca)
test.ca[, jp := sex.p * race3m1.p * agecat.p]
View(test.ca)
test.ca[, frac := eminuse * jp]
tract.est = test.ca[, .(eminuse = sum(frac)), by = .(fips, tract)]
View(tract.est)
hist(tract.est)
hist(tract.est$eminuse)
rm(tract.est)
View(test.ca)
tract.est = test.ca[, .(tot = sum(jp)), by = .(fips, tract)]
View(tract.est)
summary(tract.est$tot)
hist(tract.est$tot)
rm(acs.data)
acs.data = merge(b01001, b02001)
acs.data = merge(acs.data, b03003)
View(acs.data)
# Remove under 18 counts
acs.data[, grep('B01001_00[3-6]E', names(acs.data), value=T) := NULL]
acs.data[, grep('B01001_02[7-9]E|B01001_030E', names(acs.data), value=T) := NULL]
setnames(acs.data, c('B01001_001E', 'B01001_002E', 'B01001_026E'),
c('total', 'sex1', 'sex0'))
View(acs.data)
acs.data[, agecat0 := rowSums(.SD),
.SDcols = grep('B01001_00[7-9]|B01001_01[0-1]|B01001_03[1-5]',
names(acs.data), value=T)]
acs.data[, agecat1 := rowSums(.SD),
.SDcols = grep('B01001_01[2-3]|B01001_03[6-7]',
names(acs.data), value=T)]
acs.data[, agecat2 := rowSums(.SD),
.SDcols = grep('B01001_01[4-5]|B01001_03[8-9]',
names(acs.data), value=T)]
acs.data[, agecat3 := rowSums(.SD),
.SDcols = grep('B01001_01[6-7]|B01001_04[0-1]',
names(acs.data), value=T)]
acs.data[, agecat4 := rowSums(.SD),
.SDcols = grep('B01001_01[8-9]|B01001_02[0-1]|B01001_04[2-5]',
names(acs.data), value=T)]
acs.data[, agecat5 := rowSums(.SD),
.SDcols = grep('B01001_02[2-5]|B01001_04[6-9]',
names(acs.data), value=T)]
setnames(acs.data, c('B02001_002E', 'B02001_003E', 'B02001_005E', 'B03003_003E'),
c('race3m1.1', 'race3m1.2', 'race3m1.3', 'race3m1.7'))
acs.data[, race3m1.4 := B02001_004E + B02001_006E + B02001_007E]
acs.data[, grep('B0', names(acs.data), value=T) := NULL]
View(acs.data)
acs.data[, total.sex := sex0 + sex1]
acs.data[, total.agecat := agecat0 + agecat1 + agecat2 + agecat3 + agecat4 + agecat5]
acs.data[, total.race3m1 := race3m1.1 + race3m1.2 + race3m1.3 + race3m1.4 + race3m1.7]
View(acs.data)
grep('sex|agecat|race', names(acs.data), value=T)
cols = grep('^sex|^agecat|^race', names(acs.data), value=T)
cols
grep('^sex', names(acs.data), value=T)
acs.data[, (grep('^sex', names(acs.data), value=T)) := lapply(.SD, function(x) {
x / total.sex
}), .SDcols = grep('^sex', names(acs.data), value=T)]
acs.data[, (grep('^agecat', names(acs.data), value=T)) := lapply(.SD, function(x) {
x / total.agecat
}), .SDcols = grep('^agecat', names(acs.data), value=T)]
grep('^race', names(acs.data), value=T)
acs.data[, (grep('^race', names(acs.data), value=T)) := lapply(.SD, function(x) {
x / total.race3m1
}), .SDcols = grep('^race', names(acs.data), value=T)]
View(acs.data)
p = melt(acs.data[complete.cases(acs.data)], id.vars = c('fips', 'tract'),
measure.vars = cols)
View(acs.data)
acs.data[, fips := paste0(state, county)]
acs.data[, c('NAME', 'county') := NULL]
p = melt(acs.data[complete.cases(acs.data)], id.vars = c('fips', 'tract'),
measure.vars = cols)
View(p)
p = melt(acs.data, id.vars = c('fips', 'tract'),
measure.vars = cols)
sex = p[grep('sex', variable)]
sex[, sex := as.factor(ifelse(variable == 'sex1', 1, 0))]
sex.ca = sex[grep('^06', fips), .(fips, tract, sex, value)]
agecat = p[grep('agecat', variable)]
agecat[, variable := droplevels(variable)]
levels(agecat$variable) = levels(data$agecat)
setnames(agecat, 'variable', 'agecat')
agecat.ca = agecat[grep('^06', fips), .(fips, tract, agecat, value)]
race3m1 = p[grep('race3m1', variable)]
race3m1[, variable := droplevels(variable)]
levels(race3m1$variable) = levels(data$race3m1)
setnames(race3m1, 'variable', 'race3m1')
race3m1.ca = race3m1[grep('^06', fips), .(fips, tract, race3m1, value)]
test.ca = merge(p[grep('^06', fips), .(fips, tract)],
pframe1,
by = 'fips',
all.x = T, allow.cartesian=T)
test.ca = test.ca[!duplicated(test.ca)]
test.ca = merge(test.ca, sex.ca, by = c('fips', 'tract', 'sex'))
setnames(test.ca, 'value', 'sex.p')
test.ca = merge(test.ca, agecat.ca, by = c('fips', 'tract', 'agecat'))
setnames(test.ca, 'value', 'agecat.p')
test.ca = merge(test.ca, race3m1.ca, by = c('fips', 'tract', 'race3m1'))
setnames(test.ca, 'value', 'race3m1.p')
View(test.ca)
test.ca[, jp := sex.p * race3m1.p * agecat.p]
tract.est = test.ca[, .(tot = sum(jp)), by = .(fips, tract)]
View(tract.est)
summary(tract.est$tot)
test.ca[, frac := eminuse * jp]
View(test.ca)
tract.est = test.ca[, .(eminuse = sum(frac)), by = .(fips, tract)]
View(tract.est)
hist(tract.est$eminuse)
getwd()
list.files()
tract.est[, GEOID := paste0(fips, tract)]
View(tract.est)
tract.est[, c('fips', 'tract') := NULL]
View(tract.est)
fwrite(tract.est, 'test-ca.csv')
rm(xmm)
View(data)
data = fread('September 29 - November 6, 2016 - Information engaged wary - CSV.csv')
View(data)
table(data$device1a)
summary(data$device1a)
table(data$state)
tractACS5.us = function(vars) {
data = lapply(states, function(j) {
state = paste0('in=state:', j)
getACSdata(vars = vars,
endpoint = acs5,
apikey = apikey,
geounit = geounit,
state = state)
})
}
tractACS5.us = function(vars) {
data = lapply(states, function(j) {
state = paste0('in=state:', j)
getACSdata(vars = vars,
endpoint = acs5,
apikey = apikey,
geounit = geounit,
state = state)
})
return(data)
}
b01001 = tractACS5.us(b01001.vars)
tractACS5.us = function(vars) {
data = lapply(states, function(j) {
state = paste0('in=state:', j)
getACSdata(vars = vars,
endpoint = acs5,
apikey = apikey,
geounit = geounit,
state = state)
})
data = as.data.table(do.call('rbind', data))
return(data)
}
b01001 = as.data.table(do.call('rbind', b01001))
b02001 = tractACS5.us(b02001.vars)
b03003 = tractACS5.us(b03003.vars)
cty.income = tractACS5.us(c('NAME', 'B19013_001E'))
View(cty.income)
hist(cty.income$B19013_001E)
cty.income[B19013_001E < 0, B19013_001E := NA]
View(cty.income)
hist(cty.income$B19013_001E)
predFun <- function(fit) {
predict(fit,newDat)
}
bb <- bootMer(m,nsim=1000,FUN=predFun, use.u = T)
View(predictions)
predFun <- function(fit) {
predict(fit, type='response')
}
bb <- bootMer(m,nsim=1000,FUN=predFun, use.u = T)
View(tract.est)
View(pframe1)
predFun <- function(fit) {
predict(fit, pframe1)
}
bb <- bootMer(m,nsim=1000,FUN=predFun, use.u = T)
predFun <- function(fit) {
predict(fit, pframe1, allow.new.levels=T)
}
bb <- bootMer(m,nsim=1000,FUN=predFun, use.u=T)
install.packages('merTools')
library(merTools)
preds <- predictInterval(m, newdata = pframe1, n.sims = 999)
warnings()
detach("package:merTools", unload=T)
rm(predFun)
acs5 = 'https://api.census.gov/data/2017/acs/acs5'
acs1 = 'https://api.census.gov/data/2017/acs/acs1'
vars = getACS5vars(2017)
rm(list=ls())
library(data.table)
library(lme4)
library(FNN)
library(rgdal)
library(getACS)
library(arm)
setwd('~/Downloads/September 29 - November 6, 2016 - Information engaged wary')
data = fread('September 29 - November 6, 2016 - Information engaged wary - CSV.csv')
data = data[, .(psraid,
sample,
live1,
comp,
eminuse,
intmob,
sex,
age,
race3m1,
fips,
state,
weight,
standwt)]
data[eminuse == 9, eminuse := NA]
data[eminuse == 2, eminuse := 0]
data[intmob == 8 | intmob == 9, intmob := NA]
data[intmob == 2, intmob := 0]
data[sex == 2, sex := 0]
data[race3m1 %in% c(4, 5, 6), race3m1 := 4]
data[race3m1 %in% c(8, 9), race3m1 := NA]
data[, agecat := cut(age, breaks = c(0, 30, 40, 50, 60, 70, 100), right = F)]
data[, race3m1 := as.factor(race3m1)]
data[, sex := as.factor(sex)]
data = data[complete.cases(data)]
apikey = 'key=dce471ec2c33784bcad96cbc917b8db334df34cd'
acs5 = 'https://api.census.gov/data/2017/acs/acs5'
acs1 = 'https://api.census.gov/data/2017/acs/acs1'
geounit = 'for=tract:*'
states = fread('~/Dropbox (Social Progress)/Data/State FIPS.csv')
states[, FIPS := sprintf('%02d', FIPS)]
states = states[, FIPS]
vars = getACS5vars(2017)
b01001.vars = vars[Group == 'B01001']
b01001.vars[, Name := as.character(Name)]
b01001.vars = c('NAME', b01001.vars[[1]])
getACSgroup = function(group, vars) {
group.vars = vars[Group == group]
group.vars[, Name := as.character(Name)]
group.vars = c('NAME', group.vars[[1]])
}
getACSgroup = function(group, vars) {
group.vars = vars[Group == group]
group.vars[, Name := as.character(Name)]
group.vars = c('NAME', group.vars[[1]])
return(group.vars)
}
b01001.vars = getACSgroup('B01001', vars)
b01001.vars
b02001.vars = getACSgroup('B02001', vars)
b03003.vars = getACSgroup('B03003', vars)
tractACS.us = function(vars, endpoint) {
data = lapply(states, function(j) {
state = paste0('in=state:', j)
getACSdata(vars = vars,
endpoint = endpoint,
apikey = apikey,
geounit = geounit,
state = state)
})
data = as.data.table(do.call('rbind', data))
return(data)
}
b01001 = tractACS5.us(b01001.vars, acs5)
b02001 = tractACS5.us(b02001.vars, acs5)
b03003 = tractACS5.us(b03003.vars, acs5)
b01001 = tractACS.us(b01001.vars, acs5)
b02001 = tractACS.us(b02001.vars, acs5)
b03003 = tractACS.us(b03003.vars, acs5)
rm(list=ls())
library(data.table)
library(lme4)
library(FNN)
library(rgdal)
library(getACS)
library(arm)
setwd('~/Downloads/September 29 - November 6, 2016 - Information engaged wary')
data = fread('September 29 - November 6, 2016 - Information engaged wary - CSV.csv')
# Data preparation ----
data = data[, .(psraid,
sample,
live1,
comp,
eminuse,
intmob,
sex,
age,
race3m1,
fips,
state,
weight,
standwt)]
data[eminuse == 9, eminuse := NA]
data[eminuse == 2, eminuse := 0]
data[intmob == 8 | intmob == 9, intmob := NA]
data[intmob == 2, intmob := 0]
data[sex == 2, sex := 0]
data[race3m1 %in% c(4, 5, 6), race3m1 := 4]
data[race3m1 %in% c(8, 9), race3m1 := NA]
data[, agecat := cut(age, breaks = c(0, 30, 40, 50, 60, 70, 100), right = F)]
data[, race3m1 := as.factor(race3m1)]
data[, sex := as.factor(sex)]
data = data[complete.cases(data)]
apikey = 'key=dce471ec2c33784bcad96cbc917b8db334df34cd'
acs5 = 'https://api.census.gov/data/2017/acs/acs5'
acs1 = 'https://api.census.gov/data/2017/acs/acs1'
geounit = 'for=tract:*'
states = fread('~/Dropbox (Social Progress)/Data/State FIPS.csv')
states[, FIPS := sprintf('%02d', FIPS)]
states = states[, FIPS]
vars = getACS5vars(2017)
vars1 = getACS1vars(2017)
getACSgroup = function(group, vars) {
group.vars = vars[Group == group]
group.vars[, Name := as.character(Name)]
group.vars = c('NAME', group.vars[[1]])
return(group.vars)
}
b01001.vars = getACSgroup('B01001', vars)
b02001.vars = getACSgroup('B02001', vars)
b03003.vars = getACSgroup('B03003', vars)
tractACS.us = function(vars, endpoint) {
data = lapply(states, function(j) {
state = paste0('in=state:', j)
getACSdata(vars = vars,
endpoint = endpoint,
apikey = apikey,
geounit = geounit,
state = state)
})
data = as.data.table(do.call('rbind', data))
return(data)
}
b01001 = tractACS.us(b01001.vars, acs5)
b02001 = tractACS.us(b02001.vars, acs5)
b03003 = tractACS.us(b03003.vars, acs5)
b01001 = tractACS.us(b01001.vars, acs5)
View(data)
rm(list=ls())
source('~/Dropbox (Social Progress)/Analysis/California Regional/scorecards/Scorecards.R', echo=TRUE)
shiny::runApp('scorecards/scorecard-app')
rm(list=ls())
getwd()
setwd('~/getACS')
list.files()
devtools::install()
devtools::install()
